from aqt import gui_hooks, mw
from aqt.sound import av_player, SoundOrVideoTag
from aqt.utils import showInfo, tooltip
import subprocess
import os
import platform

if platform.system() != "Darwin":
    tooltip("MPV 快捷键插件仅支持 macOS 系统")

def create_mpv_config():
    config_dir = os.path.expanduser("~/.config/mpv")
    try:
        os.makedirs(config_dir, exist_ok=True)
    except Exception as e:
        tooltip(f"创建 MPV 配置目录失败: {str(e)}")
        return False
    
    config_path = os.path.join(config_dir, "input.conf")
    if os.path.exists(config_path):
        backup_path = config_path + ".anki_backup"
        if not os.path.exists(backup_path):
            try:
                with open(config_path, "r", encoding="utf-8") as f:
                    original_content = f.read()
                with open(backup_path, "w", encoding="utf-8") as f:
                    f.write(original_content)
            except Exception as e:
                tooltip(f"备份 MPV 配置文件失败: {str(e)}")
                return False
    
    config = mw.addonManager.getConfig(__name__) or {}
    custom_shortcuts = config.get("custom_shortcuts", {})
    
    config_content = "# Generated by Anki MPV Shortcuts Plugin\n\n"
    config_content += "# Mouse wheel controls for video progress\n"
    config_content += "WHEEL_UP seek 1\nWHEEL_DOWN seek -1\n\n"
    config_content += "# Default keyboard shortcuts\n"
    config_content += "LEFT no-osd seek -2 exact\nRIGHT no-osd seek 2 exact\n"
    config_content += "UP multiply speed 1.1\nDOWN multiply speed 0.85\n"
    config_content += "a no-osd seek -2 exact\nd no-osd seek 2 exact\n"
    config_content += "w multiply speed 1.1\ns multiply speed 0.85\n"
    config_content += "e set speed 1.0\nc ab-loop\n"
    config_content += "f cycle-values loop \"inf\" \"no\"\n"
    config_content += "x script-message-to quick_ab_loop set_quick_ab_loop 2\n"
    config_content += "z script-message-to quick_ab_loop set_custom_ab_loop 2.5 2.7\n\n"
    
    for key, action in custom_shortcuts.items():
        config_content += f"{key} {action}\n"
    
    try:
        with open(config_path, "w", encoding="utf-8") as f:
            f.write(config_content)
    except Exception as e:
        tooltip(f"创建 MPV 配置文件失败: {str(e)}")
        return False
    
    mpv_conf_path = os.path.join(config_dir, "mpv.conf")
    config = mw.addonManager.getConfig(__name__) or {}
    window_x = config.get("window_x", 50)
    window_y = config.get("window_y", 50)
    enable_speed_cycle = config.get("enable_speed_cycle", True)
    
    mpv_conf_content = f"""
# MPV 配置文件 - 由 Anki MPV 快捷键插件生成
save-position-on-quit=yes
watch-later-directory=~/.config/mpv/watch_later
script-opts=ytdl_hook-ytdl_path=yt-dlp
geometry={window_x}%:{window_y}%
"""
    
    scripts_dir = os.path.join(config_dir, "scripts")
    try:
        os.makedirs(scripts_dir, exist_ok=True)
    except Exception as e:
        tooltip(f"创建 MPV 脚本目录失败: {str(e)}")
        return False
    
    speed_cycle_script = os.path.join(os.path.dirname(__file__), "speed_cycle.lua")
    speed_cycle_dest = os.path.join(scripts_dir, "speed_cycle.lua")
    quick_ab_loop_script = os.path.join(os.path.dirname(__file__), "quick_ab_loop.lua")
    quick_ab_loop_dest = os.path.join(scripts_dir, "quick_ab_loop.lua")
    
    if not os.path.exists(speed_cycle_script):
        if not create_speed_cycle_script(speed_cycle_script):
            return False
    
    if not os.path.exists(quick_ab_loop_script):
        if not create_quick_ab_loop_script(quick_ab_loop_script):
            return False
    
    if enable_speed_cycle:
        try:
            import shutil
            shutil.copy2(speed_cycle_script, speed_cycle_dest)
        except Exception as e:
            tooltip(f"复制倍速循环脚本失败: {str(e)}")
            return False
    else:
        if os.path.exists(speed_cycle_dest):
            try:
                os.rename(speed_cycle_dest, speed_cycle_dest + ".disabled")
            except Exception as e:
                tooltip(f"禁用倍速循环脚本失败: {str(e)}")
                return False
    
    try:
        import shutil
        shutil.copy2(quick_ab_loop_script, quick_ab_loop_dest)
    except Exception as e:
        tooltip(f"复制快速AB循环脚本失败: {str(e)}")
        return False
    
    try:
        with open(mpv_conf_path, "w", encoding="utf-8") as f:
            f.write(mpv_conf_content)
    except Exception as e:
        tooltip(f"创建 MPV 主配置文件失败: {str(e)}")
        return False
    
    return True

def setup_mpv_on_startup():
    config = mw.addonManager.getConfig(__name__) or {}
    mpv_path = config.get("mpv_path", "/opt/homebrew/bin/mpv")
    
    if not os.path.exists(mpv_path):
        showInfo(f"MPV 可执行文件不存在: {mpv_path}\n请在插件配置中设置正确的 MPV 路径")
        return
    
    check_speed_cycle_script()
    
    if create_mpv_config():
        tooltip("MPV 快捷键配置已更新")
    else:
        from aqt.utils import showText
        debug_info = []
        debug_info.append(f"MPV 路径: {mpv_path}")
        debug_info.append(f"配置目录: {os.path.expanduser('~/.config/mpv')}")
        
        config_dir = os.path.expanduser("~/.config/mpv")
        if os.path.exists(config_dir):
            try:
                test_file = os.path.join(config_dir, "test_write.tmp")
                with open(test_file, "w") as f:
                    f.write("test")
                os.remove(test_file)
                debug_info.append("配置目录写入权限: 正常")
            except Exception as e:
                debug_info.append(f"配置目录写入权限: 失败 - {str(e)}")
        
        showText("\n".join(debug_info))
        showInfo("MPV 快捷键配置失败，请检查日志")

def play_with_mpv(tag):
    config = mw.addonManager.getConfig(__name__) or {}
    if not config.get("enabled", True):
        return False
    
    if isinstance(tag, SoundOrVideoTag):
        if hasattr(tag, "filename"):
            filename = tag.filename
        else:
            attrs = dir(tag)
            if "filename" in attrs:
                filename = tag.filename
            elif "path" in attrs:
                filename = tag.path
            else:
                tooltip(f"无法获取文件路径，可用属性: {attrs}")
                return
    else:
        filename = str(tag)
        import re
        match = re.search(r'sound:(.*?)(?:\]|$)', filename)
        if match:
            filename = match.group(1)
    
    media_dir = os.path.join(mw.pm.profileFolder(), "collection.media")
    full_path = os.path.join(media_dir, filename)
    
    if not os.path.exists(full_path):
        tooltip(f"文件不存在: {full_path}")
        return
    
    config = mw.addonManager.getConfig(__name__) or {}
    mpv_path = config.get("mpv_path", "/opt/homebrew/bin/mpv")
    window_scale = config.get("window_scale", 1.5)
    window_x = config.get("window_x", 50)
    window_y = config.get("window_y", 50)
    remember_position = config.get("remember_position", True)
    always_on_top = config.get("always_on_top", False)
    
    mpv_args = [mpv_path, f"--window-scale={window_scale}", "--keep-open=no"]
    
    if remember_position:
        mpv_args.append("--save-position-on-quit")
    else:
        mpv_args.append("--no-resume-playback")
    
    mpv_args.append(f"--geometry={window_x}%:{window_y}%")
    
    if always_on_top:
        mpv_args.append("--ontop")
    
    mpv_args.append(full_path)
    
    try:
        subprocess.Popen(mpv_args, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return True
    except Exception as e:
        tooltip(f"MPV 播放失败: {str(e)}")
        return False

def setup_hooks():
    original_play_av_tags = av_player.play_tags
    
    def wrapped_play_tags(tags, *args, **kwargs):
        for tag in tags:
            if isinstance(tag, SoundOrVideoTag):
                if play_with_mpv(tag):
                    return
        return original_play_av_tags(tags, *args, **kwargs)
    
    av_player.play_tags = wrapped_play_tags

def add_menu_item():
    from aqt.qt import QAction, qconnect
    
    for action in mw.form.menuTools.actions():
        if action.text() == "MPV播放设置":
            return
    
    mpv_action = QAction("MPV播放设置", mw)
    qconnect(mpv_action.triggered, show_mpv_control_panel)
    mw.form.menuTools.addAction(mpv_action)

def check_speed_cycle_script():
    config_dir = os.path.expanduser("~/.config/mpv")
    scripts_dir = os.path.join(config_dir, "scripts")
    speed_cycle_dest = os.path.join(scripts_dir, "speed_cycle.lua")
    
    if not os.path.exists(scripts_dir) or not os.path.exists(speed_cycle_dest):
        try:
            os.makedirs(scripts_dir, exist_ok=True)
            speed_cycle_script = os.path.join(os.path.dirname(__file__), "speed_cycle.lua")
            
            if not os.path.exists(speed_cycle_script):
                create_speed_cycle_script(speed_cycle_script)
            
            import shutil
            shutil.copy2(speed_cycle_script, speed_cycle_dest)
            return True
        except Exception as e:
            tooltip(f"复制倍速循环脚本失败: {str(e)}")
            return False
    return True

def create_speed_cycle_script(script_path):
    try:
        with open(script_path, "w", encoding="utf-8") as f:
            f.write("""-- 倍速循环播放脚本
local speeds = {0.7, 0.8, 1.0, 1.2}
local current_index = 1
local is_cycling = false
local timer = nil

function cycle_speed()
    if not is_cycling then return end
    mp.set_property_number("speed", speeds[current_index])
    mp.osd_message(string.format("播放速度: %.1fx", speeds[current_index]))
    current_index = current_index + 1
    if current_index > #speeds then
        stop_cycling()
        return
    end
    local remaining = mp.get_property_number("time-remaining")
    if timer then timer:kill() end
    timer = mp.add_timeout(remaining, cycle_speed)
end

function start_cycling()
    if is_cycling then
        stop_cycling()
        return
    end
    is_cycling = true
    current_index = 1
    mp.set_property("keep-open", "yes")
    mp.osd_message("开始倍速循环播放")
    cycle_speed()
end

function stop_cycling()
    is_cycling = false
    if timer then
        timer:kill()
        timer = nil
    end
    mp.set_property("keep-open", "no")
    mp.osd_message("倍速循环播放结束")
end

mp.add_key_binding("r", "speed_cycle", start_cycling)
mp.add_key_binding("v", "speed_cycle_alt", start_cycling)
mp.register_script_message("start_cycling", start_cycling)
mp.register_script_message("stop_cycling_if_active", function()
    if is_cycling then stop_cycling() end
end)
""")
        return True
    except Exception as e:
        tooltip(f"创建倍速循环脚本失败: {str(e)}")
        return False

def update_mpv_conf_geometry(x_percent, y_percent):
    config_dir = os.path.expanduser("~/.config/mpv")
    mpv_conf_path = os.path.join(config_dir, "mpv.conf")
    
    try:
        with open(mpv_conf_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
    except Exception as e:
        tooltip(f"读取MPV配置文件失败: {str(e)}")
        return False
    
    geometry_line = f"geometry={x_percent}%:{y_percent}%\n"
    geometry_found = False
    
    for i, line in enumerate(lines):
        if line.strip().startswith("geometry="):
            lines[i] = geometry_line
            geometry_found = True
            break
    
    if not geometry_found:
        lines.append(geometry_line)
    
    try:
        with open(mpv_conf_path, "w", encoding="utf-8") as f:
            f.writelines(lines)
        return True
    except Exception as e:
        tooltip(f"更新MPV配置文件失败: {str(e)}")
        return False

def show_mpv_control_panel():
    from aqt.qt import QDialog, QVBoxLayout, QLabel, QSlider, QPushButton, QHBoxLayout, QGridLayout, QCheckBox, QGroupBox
    from PyQt6.QtCore import Qt
    
    config = mw.addonManager.getConfig(__name__) or {}
    current_scale = config.get("window_scale", 1.5)
    current_x = config.get("window_x", 50)
    current_y = config.get("window_y", 50)
    is_enabled = config.get("enabled", True)
    remember_position = config.get("remember_position", True)
    enable_speed_cycle = config.get("enable_speed_cycle", True)
    always_on_top = config.get("always_on_top", False)
    
    dialog = QDialog(mw)
    dialog.setWindowTitle("MPV播放器控制面板")
    dialog.setMinimumWidth(400)
    layout = QVBoxLayout(dialog)
    
    toggle_group = QGroupBox("MPV播放器开关")
    toggle_layout = QVBoxLayout()
    
    toggle_checkbox = QCheckBox("启用MPV播放器")
    toggle_checkbox.setChecked(is_enabled)
    toggle_layout.addWidget(toggle_checkbox)
    
    remember_position_checkbox = QCheckBox("记住视频播放进度")
    remember_position_checkbox.setChecked(remember_position)
    toggle_layout.addWidget(remember_position_checkbox)
    
    speed_cycle_checkbox = QCheckBox("启用倍速循环播放脚本 (r键触发)")
    speed_cycle_checkbox.setChecked(enable_speed_cycle)
    toggle_layout.addWidget(speed_cycle_checkbox)
    
    always_on_top_checkbox = QCheckBox("视频窗口置顶")
    always_on_top_checkbox.setChecked(always_on_top)
    toggle_layout.addWidget(always_on_top_checkbox)
    
    toggle_group.setLayout(toggle_layout)
    layout.addWidget(toggle_group)
    
    scale_group = QGroupBox("视频播放窗口大小调整")
    scale_layout = QVBoxLayout()
    
    scale_label = QLabel("调整MPV视频播放窗口大小 (0.5x - 3.0x):")
    scale_layout.addWidget(scale_label)
    
    scale_slider_layout = QHBoxLayout()
    
    scale_slider = QSlider(Qt.Orientation.Horizontal)
    scale_slider.setMinimum(50)
    scale_slider.setMaximum(300)
    scale_slider.setValue(int(current_scale * 100))
    scale_slider_layout.addWidget(scale_slider, 4)
    
    scale_value_label = QLabel(f"{current_scale:.1f}x")
    scale_slider_layout.addWidget(scale_value_label, 1)
    
    scale_layout.addLayout(scale_slider_layout)
    scale_group.setLayout(scale_layout)
    layout.addWidget(scale_group)
    
    position_group = QGroupBox("视频播放窗口位置调整")
    position_layout = QVBoxLayout()
    
    position_label = QLabel("调整MPV视频播放窗口位置 (0% - 100%):")
    position_layout.addWidget(position_label)
    
    position_grid_layout = QGridLayout()
    
    x_label = QLabel("水平位置 (X):")
    position_grid_layout.addWidget(x_label, 0, 0)
    
    x_slider = QSlider(Qt.Orientation.Horizontal)
    x_slider.setMinimum(0)
    x_slider.setMaximum(100)
    x_slider.setValue(current_x)
    position_grid_layout.addWidget(x_slider, 0, 1)
    
    x_value_label = QLabel(f"{current_x}%")
    position_grid_layout.addWidget(x_value_label, 0, 2)
    
    y_label = QLabel("垂直位置 (Y):")
    position_grid_layout.addWidget(y_label, 1, 0)
    
    y_slider = QSlider(Qt.Orientation.Horizontal)
    y_slider.setMinimum(0)
    y_slider.setMaximum(100)
    y_slider.setValue(current_y)
    position_grid_layout.addWidget(y_slider, 1, 1)
    
    y_value_label = QLabel(f"{current_y}%")
    position_grid_layout.addWidget(y_value_label, 1, 2)
    
    position_layout.addLayout(position_grid_layout)
    
    preview_label = QLabel(f"预览: --geometry={current_x}%:{current_y}%")
    position_layout.addWidget(preview_label)
    
    position_group.setLayout(position_layout)
    layout.addWidget(position_group)
    
    button_layout = QHBoxLayout()
    ok_button = QPushButton("确定")
    cancel_button = QPushButton("取消")
    button_layout.addWidget(ok_button)
    button_layout.addWidget(cancel_button)
    layout.addLayout(button_layout)
    
    def update_scale_value_label(value):
        scale = value / 100
        scale_value_label.setText(f"{scale:.1f}x")
        if not scale_slider.isSliderDown():
            snap_to_nearest_half(scale_slider)
    
    def on_slider_released():
        snap_to_nearest_half(scale_slider)
    
    def snap_to_nearest_half(slider):
        current_value = slider.value()
        scale = current_value / 100
        nearest_half = round(scale * 2) / 2
        if abs(scale - nearest_half) < 0.2:
            new_value = int(nearest_half * 100)
            slider.setValue(new_value)
            scale_value_label.setText(f"{nearest_half:.1f}x")
    
    def update_x_value_label(value):
        x_value_label.setText(f"{value}%")
        update_preview()
    
    def update_y_value_label(value):
        y_value_label.setText(f"{value}%")
        update_preview()
    
    def update_preview():
        x_val = x_slider.value()
        y_val = y_slider.value()
        preview_label.setText(f"预览: --geometry={x_val}%:{y_val}%")
    
    scale_slider.valueChanged.connect(update_scale_value_label)
    scale_slider.sliderReleased.connect(on_slider_released)
    x_slider.valueChanged.connect(update_x_value_label)
    y_slider.valueChanged.connect(update_y_value_label)
    
    def on_ok():
        config["enabled"] = toggle_checkbox.isChecked()
        config["remember_position"] = remember_position_checkbox.isChecked()
        old_speed_cycle_state = config.get("enable_speed_cycle", True)
        config["enable_speed_cycle"] = speed_cycle_checkbox.isChecked()
        config["always_on_top"] = always_on_top_checkbox.isChecked()
        
        scale = scale_slider.value() / 100
        config["window_scale"] = scale
        
        x_val = x_slider.value()
        y_val = y_slider.value()
        config["window_x"] = x_val
        config["window_y"] = y_val
        
        mw.addonManager.writeConfig(__name__, config)
        
        if old_speed_cycle_state != config["enable_speed_cycle"]:
            create_mpv_config()
        else:
            update_mpv_conf_geometry(x_val, y_val)
        
        enabled_state = "启用" if config["enabled"] else "禁用"
        remember_state = "启用" if config["remember_position"] else "禁用"
        speed_cycle_state = "启用" if config["enable_speed_cycle"] else "禁用"
        always_on_top_state = "启用" if config["always_on_top"] else "禁用"
        tooltip(f"MPV播放器已{enabled_state}，记住播放进度已{remember_state}，倍速循环脚本已{speed_cycle_state}，窗口置顶已{always_on_top_state}，窗口大小: {scale:.1f}x，位置: X:{x_val}%, Y:{y_val}%")
        
        dialog.accept()
    
    def on_cancel():
        dialog.reject()
    
    ok_button.clicked.connect(on_ok)
    cancel_button.clicked.connect(on_cancel)
    
    dialog.exec()

def create_quick_ab_loop_script(script_path):
    try:
        with open(script_path, "w", encoding="utf-8") as f:
            f.write("""-- 快速AB循环脚本
local utils = require 'mp.utils'

function set_quick_ab_loop(duration)
    mp.commandv("script-message-to", "speed_cycle", "stop_cycling_if_active")
    
    mp.add_timeout(0.1, function()
        mp.set_property("ab-loop-a", -1)
        mp.set_property("ab-loop-b", -1)
        
        mp.set_property_number("speed", 1.0)
        mp.osd_message("已重置播放状态，准备开始新的快速AB循环")
        
        mp.add_timeout(0.2, function()
            setup_ab_loop(duration)
        end)
    end)
end

function set_custom_ab_loop(duration, offset)
    mp.commandv("script-message-to", "speed_cycle", "stop_cycling_if_active")
    
    mp.add_timeout(0.1, function()
        mp.set_property("ab-loop-a", -1)
        mp.set_property("ab-loop-b", -1)
        
        mp.set_property_number("speed", 1.0)
        mp.osd_message("已重置播放状态，准备开始新的自定义AB循环")
        
        mp.add_timeout(0.2, function()
            setup_custom_ab_loop(duration, offset)
        end)
    end)
end

function setup_ab_loop(duration)
    local current_pos = mp.get_property_number("time-pos")
    if not current_pos then
        mp.osd_message("无法获取当前播放位置")
        return
    end
    
    local a_pos = current_pos - 0.3
    
    if a_pos < 0 then
        a_pos = 0
    end
    
    mp.set_property("ab-loop-a", a_pos)
    mp.osd_message(string.format("已设置A点: %.2f秒", a_pos))
    
    local b_pos = a_pos + duration
    
    local duration_total = mp.get_property_number("duration")
    
    if duration_total and b_pos > duration_total then
        b_pos = duration_total
    end
    
    mp.add_timeout(0.1, function()
        mp.set_property("ab-loop-b", b_pos)
        mp.osd_message(string.format("已设置AB循环: %.2f秒 - %.2f秒", a_pos, b_pos))
        
        mp.add_timeout(0.2, function()
            mp.commandv("script-message-to", "speed_cycle", "start_cycling")
        end)
    end)
end

function setup_custom_ab_loop(duration, offset)
    local current_pos = mp.get_property_number("time-pos")
    if not current_pos then
        mp.osd_message("无法获取当前播放位置")
        return
    end
    
    local a_pos = current_pos - offset
    
    if a_pos < 0 then
        a_pos = 0
    end
    
    mp.set_property("ab-loop-a", a_pos)
    mp.osd_message(string.format("已设置A点: %.2f秒", a_pos))
    
    local b_pos = a_pos + duration
    
    local duration_total = mp.get_property_number("duration")
    
    if duration_total and b_pos > duration_total then
        b_pos = duration_total
    end
    
    mp.add_timeout(0.1, function()
        mp.set_property("ab-loop-b", b_pos)
        mp.osd_message(string.format("已设置AB循环: %.2f秒 - %.2f秒", a_pos, b_pos))
        
        mp.add_timeout(0.2, function()
            mp.commandv("script-message-to", "speed_cycle", "start_cycling")
        end)
    end)
end

mp.register_script_message("set_quick_ab_loop", function(duration_str)
    local duration = tonumber(duration_str) or 2
    set_quick_ab_loop(duration)
end)

mp.register_script_message("set_custom_ab_loop", function(duration_str, offset_str)
    local duration = tonumber(duration_str) or 2.5
    local offset = tonumber(offset_str) or 2.7
    set_custom_ab_loop(duration, offset)
end)
""")
        return True
    except Exception as e:
        tooltip(f"创建快速AB循环脚本失败: {str(e)}")
        return False

gui_hooks.profile_did_open.append(setup_mpv_on_startup)
gui_hooks.profile_did_open.append(lambda: add_menu_item())
setup_hooks()